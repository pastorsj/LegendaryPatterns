digraph G{
	node [shape = "record"]
Method [
	label = "{Method|
	- methodAccess: String\l
	- methodName: String\l
	- parameters: List\<String\>\l
	- methodReturnType: String\l
	|
	+ setAccess(String) : void\l
	+ setMethodName(String) : void\l
	+ setParameters(List\<String\>) : void\l
	+ setReturnType(String) : void\l
	+ getAccess() : String\l
	+ getMethodName() : String\l
	+ getParameters() : List\<String\>\l
	+ getReturnType() : String\l
	+ accept(IVisitor) : void\l
	}"
	]
VisitorAdapter [
	label = "{VisitorAdapter|
	|
	+ previsit(IModel) : void\l
	+ visit(IModel) : void\l
	+ postvisit(IModel) : void\l
	+ previsit(IClass) : void\l
	+ visit(IClass) : void\l
	+ postvisit(IClass) : void\l
	+ previsit(IMethod) : void\l
	+ visit(IMethod) : void\l
	+ postvisit(IMethod) : void\l
	+ previsit(IField) : void\l
	+ visit(IField) : void\l
	+ postvisit(IField) : void\l
	}"
	]
ClassFieldVisitor [
	label = "{ClassFieldVisitor|
	- legendaryClass: IClass\l
	- legendaryModel: IModel\l
	|
	+ visitField(int, String, String, String, Object) : FieldVisitor\l
	 addAccessLevel(int, IField) : void\l
	}"
	]
Class [
	label = "{Class|
	- className: String\l
	- superClassName: String\l
	- interfaces: List\<String\>\l
	- methods: List\<IMethod\>\l
	- fields: List\<IField\>\l
	- usesClasses: Set\<String\>\l
	- associationClasses: Set\<String\>\l
	- isInterface: boolean\l
	|
	+ setClassName(String) : void\l
	+ setSuper(String) : void\l
	+ setInterfaces(List\<String\>) : void\l
	+ addMethod(IMethod) : void\l
	+ addField(IField) : void\l
	+ getClassName() : String\l
	+ getSuperName() : String\l
	+ getInterfaces() : List\<String\>\l
	+ getMethods() : List\<IMethod\>\l
	+ getFields() : List\<IField\>\l
	+ setIsInterface(boolean) : void\l
	+ isInterface() : boolean\l
	+ addUsesClass(String) : void\l
	+ getUsesClasses() : Set\<String\>\l
	+ addAssociationClass(String) : void\l
	+ getAssociationClasses() : Set\<String\>\l
	+ accept(IVisitor) : void\l
	}"
	]
Model [
	label = "{Model|
	- classList: Set\<IClass\>\l
	- relations: Map\<List\<String\>, List\<Relations\>\>\l
	|
	+ getClasses() : Set\<IClass\>\l
	+ addClass(IClass) : void\l
	+ getRelations() : Map\<List\<String\>, List\<Relations\>\>\l
	+ addRelation(String, String, Relations) : void\l
	+ accept(IVisitor) : void\l
	}"
	]
ParsingMethodUtil [
	label = "{ParsingMethodUtil|
	- returnPrimCheck: Map\<String, String\>\l
	- usesClasses: List\<String\>\l
	|
	+ typeArgumentCollections(String) : List\<String\>\l
	- convert(List\<String\>) : List\<String\>, List\<String\>\l
	+ typeCollections(String) : String\l
	- parsePrimOut(java/lang/String, List\<String\>) : void\l
	+ getPrimCheck() : Map\<String, String\>\l
	- initialize() : void\l
	}"
	]
ParsingFieldUtil [
	label = "{ParsingFieldUtil|
	- returnPrimCheck: Map\<String, String\>\l
	- baseFields: Set\<String\>\l
	|
	+ getPrimCheck() : Map\<String, String\>\l
	+ typeCollections(String) : String\l
	- initialize() : void\l
	}"
	]
Field [
	label = "{Field|
	- fieldAccessType: String\l
	- fieldName: String\l
	- fieldType: String\l
	- baseFields: Set\<String\>\l
	- util: ParsingFieldUtil\l
	|
	+ setAccess(String) : void\l
	+ setFieldName(String) : void\l
	+ setType(String) : void\l
	+ getAccess() : String\l
	+ getFieldName() : String\l
	+ getType() : String\l
	+ getBaseTypes() : Set\<String\>\l
	+ accept(IVisitor) : void\l
	}"
	]
IMethod [
	label = "{\<\<interface\>\>\nIMethod|
	|
	+ setAccess(String) : void\l
	+ setMethodName(String) : void\l
	+ setParameters(List\<String\>) : void\l
	+ setReturnType(String) : void\l
	+ getAccess() : String\l
	+ getMethodName() : String\l
	+ getParameters() : List\<String\>\l
	+ getReturnType() : String\l
	}"
	]
Relations [
	label = "{Relations|
	+ EXTENDS: Relations\l
	+ IMPLEMENTS: Relations\l
	+ USES: Relations\l
	+ ASSOCIATES: Relations\l
	- ENUM$VALUES: Relations[]\l
	|
	+ values() : Relations\l
	+ valueOf(String) : Relations\l
	}"
	]
GraphVizOutputStream [
	label = "{GraphVizOutputStream|
	- builder: StringBuilder\l
	- relationRep: Map\<Relations, String\>\l
	|
	- write(String) : void\l
	+ previsit(IModel) : void\l
	+ visit(IModel) : void\l
	- addArrows(IModel) : String\l
	+ postvisit(IModel) : void\l
	+ previsit(IClass) : void\l
	+ visit(IClass) : void\l
	+ postvisit(IClass) : void\l
	+ visit(IField) : void\l
	+ visit(IMethod) : void\l
	+ initialize() : void\l
	}"
	]
IClass [
	label = "{\<\<interface\>\>\nIClass|
	|
	+ setClassName(String) : void\l
	+ setSuper(String) : void\l
	+ setInterfaces(List\<String\>) : void\l
	+ addMethod(IMethod) : void\l
	+ addField(IField) : void\l
	+ getClassName() : String\l
	+ getSuperName() : String\l
	+ getInterfaces() : List\<String\>\l
	+ getMethods() : List\<IMethod\>\l
	+ getFields() : List\<IField\>\l
	+ setIsInterface(boolean) : void\l
	+ isInterface() : boolean\l
	+ addUsesClass(String) : void\l
	+ getUsesClasses() : Set\<String\>\l
	+ addAssociationClass(String) : void\l
	+ getAssociationClasses() : Set\<String\>\l
	}"
	]
IField [
	label = "{\<\<interface\>\>\nIField|
	|
	+ setAccess(String) : void\l
	+ setFieldName(String) : void\l
	+ setType(String) : void\l
	+ getAccess() : String\l
	+ getFieldName() : String\l
	+ getType() : String\l
	+ getBaseTypes() : Set\<String\>\l
	}"
	]
ClassMethodVisitor [
	label = "{ClassMethodVisitor|
	- usesClasses: List\<String\>\l
	- legendaryClass: IClass\l
	- legendaryModel: IModel\l
	- util: ParsingMethodUtil\l
	|
	+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l
	 addAccessLevel(int, IMethod) : void\l
	 addReturnType(String, IMethod) : void\l
	 addArguments(String, IMethod) : void\l
	}"
	]
ClassDeclarationVisitor [
	label = "{ClassDeclarationVisitor|
	- legendaryClass: IClass\l
	- legendaryModel: IModel\l
	|
	+ visit(int, int, String, String, String, String[]) : void\l
	}"
	]
LegendaryClassMethodVisitor [
	label = "{LegendaryClassMethodVisitor|
	 legendaryClass: IClass\l
	 legendaryModel: IModel\l
	|
	+ visitMethodInsn(int, String, String, String, boolean) : void\l
	+ visitFieldInsn(int, String, String, String) : void\l
	+ visitTypeInsn(int, String) : void\l
	+ visitVarInsn(int, int) : void\l
	}"
	]
IVisitor [
	label = "{\<\<interface\>\>\nIVisitor|
	|
	+ previsit(IModel) : void\l
	+ visit(IModel) : void\l
	+ postvisit(IModel) : void\l
	+ previsit(IClass) : void\l
	+ visit(IClass) : void\l
	+ postvisit(IClass) : void\l
	+ previsit(IMethod) : void\l
	+ visit(IMethod) : void\l
	+ postvisit(IMethod) : void\l
	+ previsit(IField) : void\l
	+ visit(IField) : void\l
	+ postvisit(IField) : void\l
	}"
	]
IModel [
	label = "{\<\<interface\>\>\nIModel|
	|
	+ getClasses() : Set\<IClass\>\l
	+ addClass(IClass) : void\l
	+ getRelations() : Map\<List\<String\>, List\<Relations\>\>\l
	+ addRelation(String, String, Relations) : void\l
	}"
	]
ITraverser [
	label = "{\<\<interface\>\>\nITraverser|
	|
	+ accept(IVisitor) : void\l
	}"
	]
DesignParser [
	label = "{DesignParser|
	+ packageName: String\l
	+ directories: String[]\l
	|
	+ main(String[]) : void\l
	+ getClassesFromDir(File) : List\<String\>\l
	}"
	]
ClassParser [
	label = "{ClassParser|
	- classes: Map\<String, IClass\>\l
	+ instance: ClassParser\l
	|
	+ getInstance() : ClassParser\l
	+ parseModel(IModel) : void\l
	}"
	]
	edge [style = "solid"] [arrowhead = "open"]
	Model->Relations
	edge [style = "dashed"] [arrowhead = "open"]
	IVisitor->IModel
	edge [style = "dashed"] [arrowhead = "open"]
	VisitorAdapter->IField
	edge [style = "dashed"] [arrowhead = "open"]
	ClassMethodVisitor->IMethod
	edge [style = "dashed"] [arrowhead = "open"]
	Relations->Relations
	edge [style = "dashed"] [arrowhead = "empty"]
	Class->ITraverser
	edge [style = "dashed"] [arrowhead = "open"]
	ClassFieldVisitor->IField
	edge [style = "dashed"] [arrowhead = "empty"]
	VisitorAdapter->IVisitor
	edge [style = "dashed"] [arrowhead = "open"]
	ClassDeclarationVisitor->IModel
	edge [style = "dashed"] [arrowhead = "open"]
	Model->IVisitor
	edge [style = "dashed"] [arrowhead = "open"]
	ClassFieldVisitor->IModel
	edge [style = "dashed"] [arrowhead = "empty"]
	Field->IField
	edge [style = "dashed"] [arrowhead = "open"]
	VisitorAdapter->IMethod
	edge [style = "dashed"] [arrowhead = "open"]
	DesignParser->ClassMethodVisitor
	edge [style = "dashed"] [arrowhead = "open"]
	IModel->Relations
	edge [style = "dashed"] [arrowhead = "empty"]
	Field->ITraverser
	edge [style = "dashed"] [arrowhead = "open"]
	IVisitor->IClass
	edge [style = "solid"] [arrowhead = "open"]
	GraphVizOutputStream->Relations
	edge [style = "dashed"] [arrowhead = "open"]
	ClassMethodVisitor->ParsingMethodUtil
	edge [style = "dashed"] [arrowhead = "open"]
	GraphVizOutputStream->IField
	edge [style = "dashed"] [arrowhead = "empty"]
	Model->ITraverser
	edge [style = "dashed"] [arrowhead = "open"]
	VisitorAdapter->IModel
	edge [style = "solid"] [arrowhead = "empty"]
GraphVizOutputStream->VisitorAdapter
	edge [style = "dashed"] [arrowhead = "open"]
	GraphVizOutputStream->VisitorAdapter
	edge [style = "dashed"] [arrowhead = "open"]
	ClassMethodVisitor->IClass
	edge [style = "dashed"] [arrowhead = "open"]
	DesignParser->ClassFieldVisitor
	edge [style = "solid"] [arrowhead = "open"]
	Class->IField
	edge [style = "dashed"] [arrowhead = "empty"]
	Model->IModel
	edge [style = "dashed"] [arrowhead = "open"]
	ClassMethodVisitor->LegendaryClassMethodVisitor
	edge [style = "dashed"] [arrowhead = "open"]
	IClass->IMethod
	edge [style = "dashed"] [arrowhead = "open"]
	GraphVizOutputStream->IModel
	edge [style = "dashed"] [arrowhead = "empty"]
	Method->IMethod
	edge [style = "dashed"] [arrowhead = "open"]
	IClass->IField
	edge [style = "dashed"] [arrowhead = "open"]
	VisitorAdapter->IClass
	edge [style = "dashed"] [arrowhead = "open"]
	DesignParser->Model
	edge [style = "solid"] [arrowhead = "open"]
	ClassParser->IClass
	edge [style = "dashed"] [arrowhead = "open"]
	IVisitor->IMethod
	edge [style = "solid"] [arrowhead = "open"]
	Model->IClass
	edge [style = "dashed"] [arrowhead = "open"]
	ClassMethodVisitor->IModel
	edge [style = "dashed"] [arrowhead = "open"]
	Field->IVisitor
	edge [style = "dashed"] [arrowhead = "open"]
	Method->IVisitor
	edge [style = "dashed"] [arrowhead = "open"]
	ClassParser->ClassParser
	edge [style = "dashed"] [arrowhead = "open"]
	ClassDeclarationVisitor->IClass
	edge [style = "solid"] [arrowhead = "open"]
	Class->IMethod
	edge [style = "dashed"] [arrowhead = "open"]
	ClassParser->IModel
	edge [style = "dashed"] [arrowhead = "open"]
	IVisitor->IField
	edge [style = "dashed"] [arrowhead = "open"]
	ClassFieldVisitor->Field
	edge [style = "dashed"] [arrowhead = "open"]
	ClassParser->GraphVizOutputStream
	edge [style = "dashed"] [arrowhead = "open"]
	ClassFieldVisitor->IClass
	edge [style = "dashed"] [arrowhead = "open"]
	GraphVizOutputStream->IClass
	edge [style = "dashed"] [arrowhead = "open"]
	GraphVizOutputStream->IMethod
	edge [style = "dashed"] [arrowhead = "open"]
	LegendaryClassMethodVisitor->IModel
	edge [style = "dashed"] [arrowhead = "open"]
	LegendaryClassMethodVisitor->IClass
	edge [style = "dashed"] [arrowhead = "open"]
	IModel->IClass
	edge [style = "dashed"] [arrowhead = "open"]
	ITraverser->IVisitor
	edge [style = "dashed"] [arrowhead = "open"]
	Field->ParsingFieldUtil
	edge [style = "dashed"] [arrowhead = "empty"]
	Method->ITraverser
	edge [style = "dashed"] [arrowhead = "open"]
	DesignParser->ClassDeclarationVisitor
	edge [style = "dashed"] [arrowhead = "empty"]
	Class->IClass
	edge [style = "dashed"] [arrowhead = "open"]
	Class->IVisitor
	edge [style = "dashed"] [arrowhead = "open"]
	DesignParser->Class
	edge [style = "dashed"] [arrowhead = "open"]
	ClassMethodVisitor->Method
}