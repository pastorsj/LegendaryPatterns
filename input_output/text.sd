IModel:IModel
/SingletonDetector:SingletonDetector
GeneralUtil:GeneralUtil
/LegendaryClass:LegendaryClass
DesignParser:DesignParser
/LegendaryModel:LegendaryModel
/VisitorAdapter:VisitorAdapter
IPatternDetector:IPatternDetector
/ClassDeclarationVisitor:ClassDeclarationVisitor
IClass:IClass
IMethod:IMethod
/ClassFieldVisitor:ClassFieldVisitor
/GraphVizOutputStream:GraphVizOutputStream
/ClassMethodVisitor:ClassMethodVisitor
/SDEditOutputStream:SDEditOutputStream
ClassParser:ClassParser
ITraverser:ITraverser

DesignParser:ClassParser=ClassParser.getInstance()
DesignParser:void=SingletonDetector.new()
DesignParser:void=ClassParser.addDetector(IPatternDetector)
DesignParser:void=LegendaryModel.new()
DesignParser:List\<String\>=GeneralUtil.getClassesFromDir(File)
GeneralUtil:List\<String\>=GeneralUtil.getClassesFromDir(File)
DesignParser:void=LegendaryClass.new()
DesignParser:void=ClassDeclarationVisitor.new(int, IClass, IModel)
DesignParser:void=ClassFieldVisitor.new(int, ClassVisitor, IClass, IModel)
DesignParser:void=ClassMethodVisitor.new(int, ClassVisitor, IClass, IModel)
DesignParser:void=IModel.addClass(IClass)
DesignParser:void=IModel.convertToGraph()
DesignParser:void=ClassParser.makeSDEdit(String, String, int, IModel, StringBuilder)
ClassParser:Set\<IClass\>=IModel.getClasses()
ClassParser:String=IClass.getClassName()
ClassParser:List\<IMethod\>=IClass.getMethodObjects()
ClassParser:List\<String\>=IMethod.getParameters()
ClassParser:String=IMethod.getMethodName()
ClassParser:void=SDEditOutputStream.new(IModel, int, StringBuilder)
SDEditOutputStream:void=VisitorAdapter.new()
ClassParser:void=ITraverser.accept(IVisitor)
DesignParser:void=ClassParser.makeGraphViz(IModel, StringBuilder)
ClassParser:Map\<Class\<IPattern\>, Set\<IClass\>\>=IPatternDetector.detect(IModel)
ClassParser:void=ITraverser.accept(IVisitor)
